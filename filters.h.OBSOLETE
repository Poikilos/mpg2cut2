/* 
 *
 *  This file is part of DVD2AVI, a free MPEG-2 decoder
 *	
 *  DVD2AVI is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *   
 *  DVD2AVI is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *   
 *  You should have received a copy of the GNU General Public License
 *  along with GNU Make; see the file COPYING.  If not, write to
 *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 
 *
 */

extern "C" void InitFilters();
extern "C" void ApplyFilters();
extern "C" void KillFilters();
extern "C" unsigned char* GetFilteredOutput();

extern "C" void Luminance_Filter(unsigned char *src, unsigned char *dst);

extern "C" void conv420to422(int frame_type, unsigned char *src, unsigned char *dst);
extern "C" void conv422to444(unsigned char *src, unsigned char *dst);
extern "C" void conv444toRGB24odd(unsigned char *py, unsigned char *pu, unsigned char *pv, unsigned char *dst);
extern "C" void conv444toRGB24even(unsigned char *py, unsigned char *pu, unsigned char *pv, unsigned char *dst);
extern "C" void conv422toyuy2odd(unsigned char *py, unsigned char *pu, unsigned char *pv, unsigned char *dst);
extern "C" void conv422toyuy2even(unsigned char *py, unsigned char *pu, unsigned char *pv, unsigned char *dst);

class ResamplingFunction 
{
public:
  virtual double f(double x) = 0;
  virtual double support() = 0;
};

class TriangleFilter : public ResamplingFunction 
{
public:
  double f(double x) {
    x = fabs(x);
    return (x<1.0) ? 1.0-x : 0.0;
  }
  double support() { return 1.0; }
};

class MitchellNetravaliFilter : public ResamplingFunction 
{
  double p0,p2,p3,q0,q1,q2,q3;
public:
  MitchellNetravaliFilter(double b, double c) {
    p0 = (  6. -  2.*b        ) / 6.;
    p2 = (-18. + 12.*b +  6.*c) / 6.;
    p3 = ( 12. -  9.*b -  6.*c) / 6.;
    q0 = (	     8.*b + 24.*c) / 6.;
    q1 = (	  - 12.*b - 48.*c) / 6.;
    q2 = (	     6.*b + 30.*c) / 6.;
    q3 = (     -     b -  6.*c) / 6.;
  }
  double f(double x) {
    x = fabs(x);
    return (x<1) ? (p0+x*x*(p2+x*p3)) : (x<2) ? (q0+x*(q1+x*(q2+x*q3))) : 0.0;
  }
  double support() { return 2.0; }
};

class FilteredResizeH 
{
  int* /*const*/ pattern_luma;
  int* /*const*/ pattern_chroma;
  int original_width;
  unsigned char *tempY, *tempUV;
  int width;
  int height;
  int m_YUV;
public:
  FilteredResizeH(int isYUV, int wi, int he, double subrange_left, double subrange_width, int target_width, ResamplingFunction* func);
  void ResizeFrame(unsigned char* srcp, unsigned char* dstp, int src_pitch, int dst_pitch); 
  ~FilteredResizeH();
};

class FilteredResizeV  
{
  int* resampling_pattern;
  int *yOfs;
  int width;
  int height;
  int m_YUV;
public:
  FilteredResizeV(int isYUV,int wi, int he, int subrange_top, int subrange_height, int target_height, ResamplingFunction* func);
  void ResizeFrame(unsigned char* srcp, unsigned char* dstp, int src_pitch, int dst_pitch, int row_size);
  ~FilteredResizeV();
};

